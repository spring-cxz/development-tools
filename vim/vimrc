"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sections:
"    -> Plugins management
"    -> General
"    -> VIM user interface
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> User functions
"    -> Abbreviations
"    -> Colors and Fonts
"    -> Plugin settings
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins management: vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Load plugins to be installed
call plug#begin()
"----------------------------------
" development/programming tools
"----------------------------------
"--- Language specific/syntax checking ---
"Plug 'jvirtanen/vim-octave'
"Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'NLKNguyen/c-syntax.vim'
"Plug 'klen/python-mode'
"Plug 'JuliaEditorSupport/julia-vim'
"Plug 'scrooloose/syntastic'

" --- Directory Listing ---
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } " Fuzzy finder
"Plug 'junegunn/fzf.vim' " Fuzzy finder plugin
Plug 'rking/ag.vim'
Plug 'vim-scripts/ctrlp.vim'
Plug 'scrooloose/nerdtree'

" --- Comments ---
Plug 'scrooloose/nerdcommenter'
"Plug 'tpope/vim-commentary'
"Plug 'tomtom/tcomment_vim'

" --- Code Formatting ---
Plug 'tpope/vim-surround'
Plug 'Yggdroot/indentLine'

" --- Autocompletion---
"Plug 'Valloric/YouCompleteMe', {'do' : 'python3 install.py --clang-completer'}
"snippets
""Plug 'msanders/snipmate.vim'
"Plug 'MarcWeber/vim-addon-mw-utils'|Plug 'tomtom/tlib_vim'|Plug 'garbas/vim-snipmate'
" Optional:
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'vim-scripts/winmanager'
Plug 'vim-scripts/AutoComplPop'
Plug 'vim-scripts/OmniCppComplete'
Plug 'vim-scripts/taglist.vim'
Plug 'fholgado/minibufexpl.vim'
"Plug 'mileszs/ack.vim'

" --- Git ---
"Plug 'tpope/vim-fugitive'
"Plug 'airblade/vim-gitgutter'
"Plug 'rhysd/committia.vim'

" --- Command line Integration ---
"Plug 'benmills/vimux'
"Plug 'oplatek/Conque-Shell'

" --- Misc ---
Plug 'vim-scripts/supertab'
Plug 'majutsushi/tagbar'
"Plug 'mhinz/vim-startify'

"----------------------------------
" document writing and note taking
"----------------------------------
"Plug 'altercation/solarized/tree/master/vim-colors-solarized'
Plug 'altercation/vim-colors-solarized'
"Plug 'iamcco/markdown-preview.vim'
"Plug 'iamcco/mathjax-support-for-mkdp'
"Plug 'vim-latex/vim-latex'
"Plug 'lervag/vimtex'
"use fork from DENG Yao for glossary compatibility
"Plug 'yxrdydh/vim-latex-live-preview'
"Plug 'xuhdev/vim-latex-live-preview'
"Plug 'vimwiki/vimwiki'
"Plug 'rhysd/vim-grammarous' 

"----------------------------------
" colorschemes and themes
"----------------------------------
"Plug 'powerline/powerline-fonts'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
"Plug 'romainl/Apprentice'
"Plug 'ayu-theme/ayu-vim'
"Plug 'sjl/badwolf'
"Plug 'chriskempson/base16-vim'
"Plug 'morhetz/gruvbox'
"Plug 'nanotech/jellybeans.vim'
"Plug 'tomasr/molokai'
"Plug 'croaker/mustang-vim'
"Plug 'NLKNguyen/papercolor-theme'
"Plug 'jacoborus/tender.vim'
"Plug 'veloce/vim-aldmeris'
"Plug 'w0ng/vim-hybrid'
"Plug 'kristijanhusak/vim-hybrid-material'
"Plug 'zeis/vim-kolor'

call plug#end()

" General
set nocompatible              " be iMproved, required
set t_Co=256
set background=dark
"colorscheme ron 
set number  " Show line numbers
syntax enable
set syntax=on	    " 语法高亮
set showcmd         " 输入的命令显示出来，看的清楚些 
set autoread        " 当文件被外部改变时自动读取 
set linebreak " Break lines at word (requires Wrap lines)
set showbreak=+++ " Wrap-broken line prefix
set textwidth=100 " Line wrap (number of cols)
set showmatch " Highlight matching brace
set visualbell  " Use visual bell (no beeping)
 
set hlsearch  " Highlight all search results
set smartcase " Enable smart-case search
set ignorecase  " Always case-insensitive
set incsearch " Searches for strings incrementally
 
set autoindent  " Auto-indent new lines
set cindent 
set tabstop=2
set expandtab " Use spaces instead of tabs
set shiftwidth=2  " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab  " Enable smart-tabs
set softtabstop=2 " Number of spaces per Tab
set laststatus=2    " 总是显示状态行 
set noswapfile      " 禁止生成swp文件
 
" Advanced
set ruler " Show row and column ruler information
 
set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
 

"set fillchars=vert:\ ,stl:\ ,stlnc:\
"set guifont=Courier_New:h11:cANSI
"set guifontwide=新宋体:h11:cGB2312
 
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set mouse=v " activate mouse
"set mouse=a " activate mouse
"let mapleader="\"

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

map <F2> <ESC>:set tags=tags<CR>
map <F3> <ESC>:cscope add cscope.out<CR>
map <F4> <ESC><C-W><C-W>
"map <F3> <ESC>:Tlist<CR>
map <F5> <ESC>:NERDTreeToggle<CR>
map <F9> <ESC>:set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<CR><ESC>set termencoding=utf-8<CR><ESC>set encoding=prc<CR>
map <F12> <ESC>:!cscope -Rbq<CR>


filetype plugin indent on
"set completeopt=longest,menu    "智能补全下拉窗口

let g:winManagerWindowLayout='TagList'
"nmap wm :WMToggle<cr>

"设置winmanager的宽度，默认为25 {
let g:winManagerWidth = 30
let g:AutoOpenWinManager = 1
"}

"ag {
map <leader>a :Ag!<space>
"}

"airline{
let g:airline_theme='papercolor'
set laststatus=2
" 使用powerline打过补丁的字体
let g:airline_powerline_fonts = 1
" 开启tabline
"let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
"let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
"let g:airline#extensions#tabline#left_alt_sep = '|'
" tabline中buffer显示编号
"let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
"}

"powerline{
 set guifont=PowerlineSymbols\ for\ Powerline
 set nocompatible
 set t_Co=256
 let g:Powerline_symbols = 'fancy'
 let Powerline_symbols='compatible'
"}

"taglist{
 let Tlist_Show_One_File = 1            "只显示当前文件的taglist，默认是显示多个
 let Tlist_Exit_OnlyWindow = 1          "如果taglist是最后一个窗口，则退出vim
 "let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist
 "let Tlist_GainFocus_On_ToggleOpen = 1  "打开taglist时，光标保留在taglist窗口
 "let Tlist_Ctags_Cmd='/opt/local/bin/ctags'  "设置ctags命令的位置
 nmap <F6> <ESC>: Tlist<CR>                   "设置关闭和打开taglist窗口的快捷键
"}

"minibufexplorerpp{
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplMapWindowNavVim = 1  "C+h j k l
let g:miniBufExplMapWindowNavArrows = 1
"}


"cscope {
if has("cscope")
  set csprg=/usr/bin/cscope   "指定用来执行cscope的命令
  set csto=0                  " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库"
  set cst                     " 同时搜索cscope数据库和标签文件"
  "set cscopequickfix=s-,c-,d-,i-,t-,e-    " 使用QuickFix窗口来显示cscope查找结果"
  set nocsverb
  if filereadable("cscope.out")    "若当前目录下存在cscope数据库，添加该数据库到vim
    cs add cscope.out
  elseif $CSCOPE_DB != ""          "否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
    cs add $CSCOPE_DB
  endif
  set csverb
endif
nmap <leader><leader>s :cs find s <space>
nmap <leader><leader>g :cs find g <space>
nmap <leader><leader>c :cs find c <space>
nmap <leader><leader>f :cs find f <space>
nmap <leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>   "查找C语言符号，即查找函数名、宏、枚举值等出现的地方
nmap <leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>   "查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
nmap <leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>   "查找本函数调用的函数
nmap <leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>   "查找调用本函数的函数
nmap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>   "查找指定字符串
nmap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>   "查找并打开文件，类似vim的find功能
nmap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>   "查找egrep模式，相当于egrep功能，但查找速度快多了
nmap <leader>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR> "查找包含本文件的文件
"}

"ctrlp{
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_match_window_reversed=1
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=66
let g:ctrlp_max_height=30
let g:ctrlp_mruf_max=600
let g:ctrlp_follow_symlinks=1
"默认使用全路径搜索，置1后按文件名搜索，准确率会有所提高，可以用<C-d>进行切换
let g:ctrlp_by_filename = 0
"默认不使用正则表达式，置1改为默认使用正则表达式，可以用<C-r>进行切换
let g:ctrlp_regexp = 0
"自定义搜索列表的提示符
let g:ctrlp_line_prefix = '♪ '
"搜索当前目录下所有文件
map <C-\>pp <ESC>:CtrlP<CR>
"搜索文件夹
map <C-\>pd <ESC>:CtrlPDir<CR>
"搜索修改记录，可以回退
map <C-\>pu <ESC>:CtrlPUndo<CR>
"搜索行
map <C-\>pl <ESC>:CtrlPLine<CR>
"搜索修改记录，可以定位光标
map <C-\>pc <ESC>:CtrlPChangeAll<CR>
map <C-\>pb <ESC>:CtrlPBookmarkDir<CR>       
"搜索最近修改的文件
map <C-\>pm <ESC>:CtrlPMRU<CR>
"进入当前文件的函数列表搜索
map <C-\>f <ESC>:CtrlPFunky<CR>
"搜索当前光标下单词对应的函数
map <C-\>F <ESC>:execute 'CtrlPFunky ' . expand('<cword>')<CR>
"}

"omnicppcomplete{
map <F11> <ESC>:!ctags -R --c++-kinds=+px --fields=+aiKSz --extra=+q .<CR> 
filetype plugin on
let OmniCpp_MayCompleteDot = 1      " autocomplete with .
let OmniCpp_MayCompleteArrow = 1    " autocomplete with ->
let OmniCpp_MayCompleteScope = 1    " autocomplete with ::
let OmniCpp_SelectFirstItem = 2     " select first item
let OmniCpp_NamespaceSearch = 2     " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1     " enable the global scope search
let OmniCpp_DisplayMode=1           " Class scope completion mode: always show all members
let OmniCpp_DefaultNamespaces=["std"]
"}
"
"solarized {
"option name               default     optional
"------------------------------------------------
let g:solarized_termcolors=256
"let g:solarized_termcolors=   16      |   256
"let g:solarized_termtrans =   0       |   1
"let g:solarized_termtrans =   1
"let g:solarized_degrade   =   0       |   1
"let g:solarized_bold      =   1       |   0
"let g:solarized_underline =   1       |   0
"let g:solarized_italic    =   1       |   0
"let g:solarized_contrast  =   "normal"|   "high" or "low"
let g:solarized_contrast  =   "high" 
"let g:solarized_visibility=   "normal"|   "high" or "low"
let g:solarized_visibility=   "high"
colorscheme solarized
"------------------------------------------------
"}
