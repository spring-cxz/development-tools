call pathogen#infect()

colorscheme darkblue
set hlsearch
"set mouse=a
set autoread        " 当文件被外部改变时自动读取 
set nu              " 显示行号  
set showcmd         " 输入的命令显示出来，看的清楚些 
set syntax=on	    " 语法高亮
set autoindent      " autoindent 是自动缩进, cindent是特别针对C语言语法自动缩进
set smartindent 
set cindent 
set tabstop=4
set expandtab       " 自动将tab转换为空格
set laststatus=2    " 总是显示状态行 
set cursorline      " 高亮光标所在行
set novisualbell    " 取消光标闪烁
set ruler           " 标尺功能，显示当前光标所在行列号
set ignorecase      " 在搜索的时候忽略大小写
set incsearch       " 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
"set fillchars=vert:\ ,stl:\ ,stlnc:\
"set guifont=Courier_New:h11:cANSI
"set guifontwide=新宋体:h11:cGB2312
"set noswapfile      " 禁止生成swp文件


map <F2> <ESC>:set tags=tags<CR>
map <F3> <ESC>:cscope add cscope.out<CR>
map <F4> <ESC><C-W><C-W>
"map <F3> <ESC>:Tlist<CR>
map <F5> <ESC>:NERDTreeToggle<CR>
map <F9> <ESC>:set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<CR><ESC>set termencoding=utf-8<CR><ESC>set encoding=prc<CR>
map <F12> <ESC>:!cscope -Rbq<CR>


filetype plugin indent on
"set completeopt=longest,menu    "智能补全下拉窗口

let g:winManagerWindowLayout='TagList'
"nmap wm :WMToggle<cr>

"设置winmanager的宽度，默认为25
let g:winManagerWidth = 30
let g:AutoOpenWinManager = 1

"powerline{
 set guifont=PowerlineSymbols\ for\ Powerline
 set nocompatible
 set t_Co=256
 let g:Powerline_symbols = 'fancy'
 let Powerline_symbols='compatible'
 "}

 "taglist{
    let Tlist_Show_One_File = 1            "只显示当前文件的taglist，默认是显示多个
    let Tlist_Exit_OnlyWindow = 1          "如果taglist是最后一个窗口，则退出vim
    "let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist
    "let Tlist_GainFocus_On_ToggleOpen = 1  "打开taglist时，光标保留在taglist窗口
    "let Tlist_Ctags_Cmd='/opt/local/bin/ctags'  "设置ctags命令的位置
    nmap <F6> <ESC>: Tlist<CR>                   "设置关闭和打开taglist窗口的快捷键
"}

"minibufexplorerpp{
let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
"}


"cscope {
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>   "查找C语言符号，即查找函数名、宏、枚举值等出现的地方
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>   "查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>   "查找本函数调用的函数
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>   "查找调用本函数的函数
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>   "查找指定字符串
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>   "查找并打开文件，类似vim的find功能
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>   "查找egrep模式，相当于egrep功能，但查找速度快多了
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR> "查找包含本文件的文件
"}

"ctrlp{
"搜索当前目录下所有文件
map <leader>pp <ESC>:CtrlP<CR>
"搜索文件夹
map <leader>pd <ESC>:CtrlPDir<CR>
"搜索修改记录，可以回退
map <leader>pu <ESC>:CtrlPUndo<CR>
"搜索行
map <leader>pl <ESC>:CtrlPLine<CR>
"搜索修改记录，可以定位光标
map <leader>pc <ESC>:CtrlPChangeAll<CR>
map <leader>pb <ESC>:CtrlPBookmarkDir<CR>       
"搜索最近修改的文件
map <leader>pm <ESC>:CtrlPMRU<CR>
"进入当前文件的函数列表搜索
map <Leader>f <ESC>:CtrlPFunky<CR>
"搜索当前光标下单词对应的函数
map <Leader>F <ESC>:execute 'CtrlPFunky ' . expand('<cword>')<CR>
"}

"omnicppcomplete{
map <F11> <ESC>:!ctags -R --c++-kinds=+px --fields=+aiKSz --extra=+q .<CR> 
filetype plugin on
let OmniCpp_MayCompleteDot = 1      " autocomplete with .
let OmniCpp_MayCompleteArrow = 1    " autocomplete with ->
let OmniCpp_MayCompleteScope = 1    " autocomplete with ::
let OmniCpp_SelectFirstItem = 2     " select first item
let OmniCpp_NamespaceSearch = 2     " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1     " enable the global scope search
let OmniCpp_DisplayMode=1           " Class scope completion mode: always show all members
let OmniCpp_DefaultNamespaces=["std"]
"}
